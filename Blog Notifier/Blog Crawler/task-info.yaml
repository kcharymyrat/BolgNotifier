type: remote_edu
files:
  - name: main.go
    visible: true
    text: "package main\n\nimport \"fmt\"\n\nfunc main() {\n\t// Write your code solution\
    \ for the project below.\n\tfmt.Println(\"Hello, World!\")\n}\n"
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/blognotifier_test_utils.py
    visible: false
    text: "import random, os, socketserver, http.server, shutil, sqlite3\nfrom string\
    \ import Template\n\nDB_FILE = 'blogs.sqlite3'\nNO_LINKS_TEST = 'no_links'\nFLAT_MULTIPLE_LINKS_TEST\
    \ = 'flat_multiple_links'\nNESTED_LINKS_TEST_1 = 'nested_links_1'\nNESTED_LINKS_TEST_2\
    \ = 'nested_links_2'\nNESTED_AND_FLAT_LINKS_TEST = 'nested_and_flat_links'\n\n\
    FAKE_BLOG = \"fake-blog\"\nPORT = 8000\nADDRESS = \"127.0.0.1\"\nblog_addr = f\"\
    http://{ADDRESS}:{PORT}/{FAKE_BLOG}/\"\n\ntables_properties = {\n    'blogs':\
    \ {\n        'site': 'TEXT',\n        'last_link': 'TEXT'\n    },\n    'posts':\
    \ {\n        'link': 'TEXT',\n        'site': 'TEXT',\n    },\n    'mails': {\n\
    \        'id': 'INTEGER',\n        'mail': 'TEXT',\n        'is_sent': 'INTEGER'\n\
    \    }\n}\n\npage_template = \"\"\"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\
    \    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width,\
    \ initial-scale=1.0\">\n    <title>Random Blog Post</title>\n    <style>\n   \
    \     body {\n            font-family: Arial, sans-serif;\n            line-height:\
    \ 1.6;\n            max-width: 800px;\n            margin: 0 auto;\n         \
    \   padding: 20px;\n        }\n        .post {\n            margin-bottom: 20px;\n\
    \            border: 1px solid #ccc;\n            padding: 15px;\n           \
    \ border-radius: 8px;\n            background-color: #fff;\n        }\n\n    \
    \    h1 {\n            color: #333;\n        }\n\n        p {\n            color:\
    \ #666;\n            word-break: break-all;\n            white-space: normal;\n\
    \        }\n\n        a {\n            color: #007BFF;\n            text-decoration:\
    \ none;\n            font-weight: bold;\n        }\n\n        a:hover {\n    \
    \        text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n\
    \    $body        \n</body>\n</html>\"\"\"\n\nlink_template = \"\"\"<div class=\"\
    post\">\n    <p><a href=\"$postaddr\">$name</a></p>\n</div>\"\"\"\n\npost_template\
    \ = \"\"\"<div class=\"post\">\n        <p>$body</p>\n    </div>\"\"\"\n\nhtml_files\
    \ = []\nblog_files = {}\n\n\ndef check_table_exists(table_name: str) -> bool:\n\
    \    connection = sqlite3.connect(DB_FILE)  # Replace 'your_database.db' with\
    \ your database file\n    # Create a cursor object\n    cursor = connection.cursor()\n\
    \    cursor.execute(f\"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'\"\
    )\n    # Fetch the result\n    result = cursor.fetchone()\n    cursor.close()\n\
    \    connection.close()\n    return result is not None\n\n\ndef check_table_properties(table_name)\
    \ -> tuple:\n    # Connect to the SQLite database\n    connection = sqlite3.connect(DB_FILE)\n\
    \    # Create a cursor object\n    cursor = connection.cursor()\n    cursor.execute(f\"\
    PRAGMA table_info({table_name})\")\n    # Fetch all the rows from the result\n\
    \    columns_info = cursor.fetchall()\n    # Convert fetched data into a dictionary\
    \ {column_name: column_type}\n    columns_info_dict = {column[1]: column[2].upper()\
    \ for column in columns_info}  # Convert types to uppercase\n    cursor.close()\n\
    \    connection.close()\n\n    # Define columns automatically added by GORM that\
    \ should be ignored\n    gorm_columns = {'created_at', 'updated_at', 'deleted_at'}\n\
    \n    # Optionally include 'id' in gorm_columns if it's not a strict requirement\n\
    \    if 'id' not in tables_properties[table_name]:\n        gorm_columns.add('id')\n\
    \n    # Filter out the GORM-specific columns and optionally 'id' from the columns_info_dict\n\
    \    filtered_columns_info = {k: v for k, v in columns_info_dict.items() if k\
    \ not in gorm_columns}\n\n    # Check if all required columns and their types\
    \ exist in the filtered table structure\n    required_columns = tables_properties[table_name]\n\
    \    for col_name, col_type in required_columns.items():\n        # Check presence\
    \ and type of required columns, comparing types in uppercase\n        if col_name\
    \ not in filtered_columns_info or filtered_columns_info[col_name] != col_type.upper():\n\
    \            # If a required column is missing or has a different type, return\
    \ False with found columns info\n            return False, filtered_columns_info\n\
    \n    # If all required columns are present and have correct types, return True\
    \ with the filtered columns info\n    return True, filtered_columns_info\n\n\n\
    def remove_db_file():\n    print(os.curdir)\n    if os.path.exists(DB_FILE):\n\
    \        os.remove(DB_FILE)\n\n\ndef remove_fake_blog():\n    folder_path = os.path.join(os.getcwd(),\
    \ FAKE_BLOG)\n    shutil.rmtree(folder_path)\n\n\ndef create_html_file(file_name,\
    \ content):\n    folder_path = os.path.join(os.getcwd(), FAKE_BLOG)\n    if not\
    \ os.path.exists(folder_path):\n        os.makedirs(folder_path)\n    file_path\
    \ = os.path.join(folder_path, file_name)\n    with open(file_path, 'w') as file:\n\
    \        file.write(content)\n\n\ndef generate_random_text(k: int) -> str:\n \
    \   return \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz123456789\", k=k))\n\
    \n\n# only one html file containing no links will be created\ndef create_blog_site_with_no_posts():\n\
    \    name = generate_random_text(4)\n    body = f'<div class=\"post\"><p>{generate_random_text(250)}</p></div>'\n\
    \    t = Template(page_template)\n    blog_page = t.substitute({'body': body})\n\
    \    create_html_file(f'{name}.html', blog_page)\n    html_files.append(f'{name}.html')\n\
    \    blog_files[NO_LINKS_TEST] = f'{blog_addr}{name}.html'\n\n\n# this will create\
    \ a website with the following pattern, index.html will contain links to multiple\
    \ blog posts.\n# these blog posts will not contain any links thus, the site created\
    \ has a flat structure\ndef create_flat_blog_site_with_multiple_posts():\n   \
    \ n = random.randint(3, 5)\n    l = \"\"\n    blog_files['flat_multiple_links']\
    \ = []\n    for i in range(n):\n        name = generate_random_text(k=4)\n   \
    \     postaddr = f\"{blog_addr}{name}.html\"\n        t = Template(link_template)\n\
    \        l += t.substitute({'postaddr': postaddr, 'name': name})\n        create_html_file(f'{name}.html',\n\
    \                         Template(page_template).substitute(\n              \
    \               {'body': f'<div class = \"post\"><p>{generate_random_text(250)}</p></div>'}))\n\
    \        html_files.append(f'{name}.html')\n        blog_files[FLAT_MULTIPLE_LINKS_TEST].append(f'{blog_addr}{name}.html')\n\
    \n    t = Template(page_template)\n    blog_page = t.substitute({'body': l})\n\
    \    create_html_file(\"index.html\", blog_page)\n    html_files.append(\"index.html\"\
    )\n    blog_files[FLAT_MULTIPLE_LINKS_TEST].append(blog_addr)\n\n\ndef _create_blog_site_with_nested_posts(depth:\
    \ int, test_name):\n    if depth == 1:\n        name0 = generate_random_text(k=4)\n\
    \        create_html_file(f'{name0}.html',\n                         Template(page_template).substitute(\n\
    \                             {'body': f'<div class=\"post\"><p>{generate_random_text(250)}</p></div>'}))\n\
    \        html_files.append(f'{name0}.html')\n        blog_files[test_name].append(f'{blog_addr}{name0}.html')\n\
    \        t = Template(link_template)\n        l = t.substitute({'postaddr': f'{blog_addr}{name0}.html',\
    \ 'name': name0})\n        name1 = generate_random_text(k=4)\n        create_html_file(f'{name1}.html',\
    \ Template(page_template).substitute({'body': l}))\n        html_files.append(f'{name1}.html')\n\
    \        blog_files[test_name].append(f'{blog_addr}{name1}.html')\n        return\
    \ name1\n    name0 = _create_blog_site_with_nested_posts(depth - 1, test_name)\n\
    \    t = Template(link_template)\n    l = t.substitute({'postaddr': f'{blog_addr}{name0}.html',\
    \ 'name': name0})\n    name1 = generate_random_text(k=4)\n    create_html_file(f'{name1}.html',\
    \ Template(page_template).substitute({'body': l}))\n    html_files.append(f'{name1}.html')\n\
    \    blog_files[test_name].append(f'{blog_addr}{name1}.html')\n    return name1\n\
    \n\n# this will create website with the following pattern: a.html contains link\
    \ to b.html, b.html contains link to\n# c.html, c.html contain link to d.html.\
    \ depending on the parameter depth, this is created for the test to ensure\n#\
    \ that the blog crawler does not go into endless recursion.\ndef create_blog_site_with_nested_posts(depth:\
    \ int, test_name: str):\n    blog_files[test_name] = []\n    parent_name = _create_blog_site_with_nested_posts(depth,\
    \ test_name)\n    return parent_name\n\n\n# a blog with the following pattern\
    \ will be created: a blog site with links to multiple blog posts, Some of these\n\
    # blog posts can have nested links. some blog posts have nested and others have\
    \ flat pattern\ndef create_blog_site_with_nested_and_flat_posts():\n    def visualize_nested_blogs(blog_posts_list:\
    \ list, viz_file_name: str):\n        l = \"\"\n        n = 0\n        for el\
    \ in blog_posts_list:\n            l += f'{\" \" * n}{el}\\n'\n            n +=\
    \ 1\n        with open(viz_file_name, 'w') as f:\n            f.write(l)\n\n \
    \   blog_files[NESTED_AND_FLAT_LINKS_TEST] = []\n    # creating blog posts with\
    \ no links in them\n    n = random.randint(3, 5)\n    l = \"\"\n    for i in range(n):\n\
    \        name = generate_random_text(k=4)\n        postaddr = f\"{blog_addr}{name}.html\"\
    \n        t = Template(link_template)\n        l += t.substitute({'postaddr':\
    \ postaddr, 'name': name})\n        create_html_file(f'{name}.html',\n       \
    \                  Template(page_template).substitute(\n                     \
    \        {'body': f'<div class = \"post\"><p>{generate_random_text(250)}</p></div>'}))\n\
    \        html_files.append(f'{name}.html')\n        blog_files[NESTED_AND_FLAT_LINKS_TEST].append(postaddr)\n\
    \n    # creating blog posts with nested links of depth 2\n    nested_post_1 =\
    \ create_blog_site_with_nested_posts(depth=1, test_name='nested_links_1')\n  \
    \  t = Template(link_template)\n    l += t.substitute({'postaddr': f\"{blog_addr}{nested_post_1}.html\"\
    , 'name': nested_post_1})\n    blog_files[NESTED_AND_FLAT_LINKS_TEST].extend(blog_files['nested_links_1'][-1::-1])\n\
    \    # visualize_nested_blogs(blog_files['nested_links_2'][-1::-1], 'nested_links_2.txt')\n\
    \n    # creating blog posts with nested links of depth 3\n    nested_post_2 =\
    \ create_blog_site_with_nested_posts(depth=2, test_name='nested_links_2')\n  \
    \  t = Template(link_template)\n    l += t.substitute({'postaddr': f\"{blog_addr}{nested_post_2}.html\"\
    , 'name': nested_post_2})\n    blog_files[NESTED_AND_FLAT_LINKS_TEST].extend(blog_files['nested_links_2'][-1::-1])\n\
    \    # visualize_nested_blogs(blog_files['nested_links_3'][-1::-1], 'nested_links_3.txt')\n\
    \n    t = Template(page_template)\n    blog_page = t.substitute({'body': l})\n\
    \    create_html_file(\"index2.html\", blog_page)\n    html_files.append(\"index2.html\"\
    )\n    blog_files[NESTED_AND_FLAT_LINKS_TEST].append(f'{blog_addr}index2.html')\n\
    \n\ndef run_http_server(port):\n    # Create an HTTP server with the specified\
    \ port and handler\n    handler = http.server.SimpleHTTPRequestHandler\n    with\
    \ socketserver.TCPServer((\"\", port), handler) as httpd:\n        print(f\"Serving\
    \ on port {port}\")\n        httpd.serve_forever()\n"
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      import multiprocessing
      from .blognotifier_test_utils import *
      
      from hstest import StageTest, TestedProgram, CheckResult, dynamic_test
      
      
      class TestBlogNotifierCLI(StageTest):
      
          @dynamic_test(time_limit=120000)
          def test1_migrate_command(self):
              # Test the --migrate sub-command which creates the blogs.sqlite3 database and tables
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate").strip().lower()
      
              for table_name in tables_properties:
                  if check_table_exists(table_name) is False:
                      raise CheckResult.wrong(f"The --migrate command did not create the '{table_name}' table.")
                  temp = check_table_properties(table_name)
                  if temp[0] is False:
                      raise CheckResult.wrong(
                          f"Wrong column types for '{table_name}' table. Expected column types for the '{table_name}' table are {tables_properties[table_name]}. Found {temp[1]}")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test2_explore_command(self):
              # Test the --list sub-command which lists all blog sites in the watch list
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog_1 = blog_files[FLAT_MULTIPLE_LINKS_TEST][0]
              program.start('--explore', blog_1)
              program = TestedProgram()
              blog_2 = blog_files[FLAT_MULTIPLE_LINKS_TEST][1]
              program.start('--explore', blog_2)
              program = TestedProgram()
              blog_3 = blog_files[FLAT_MULTIPLE_LINKS_TEST][2]
              program.start('--explore', blog_3)
              program = TestedProgram()
              output = program.start("--list").strip()
      
              if f"{blog_1} {blog_1}" not in output or f"{blog_2} {blog_2}" not in output or f'{blog_3} {blog_3}' not in output:
                  raise CheckResult.wrong("The --list command did not list all the blog sites in the watch list correctly. "
                                          "May be explore functionality is not implemented correctly")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test3_remove_command(self):
              # Test the --remove sub-command which removes a blog from the watch list
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog_1 = blog_files[FLAT_MULTIPLE_LINKS_TEST][0]
              program.start('--explore', blog_1)
              program = TestedProgram()
              blog_2 = blog_files[FLAT_MULTIPLE_LINKS_TEST][1]
              program.start('--explore', blog_2)
              program = TestedProgram()
              program.start('--remove', blog_1).strip()
      
              program = TestedProgram()
              output = program.start("--list").strip()
      
              if f"{blog_1} {blog_1}" in output:
                  raise CheckResult.wrong(
                      "The --list command shows wrong output, seams like '--remove' flag was not implemented correctly")
      
              if f"{blog_2} {blog_2}" not in output:
                  raise CheckResult.wrong(
                      "The --list command shows wrong output, seams like '--remove' flag was not implemented correctly")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test4_crawling_with_no_hyperlinks(self):
              # Test the crawl flag and list-posts sub-command.
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              program.start('--explore', blog_files[NO_LINKS_TEST])
              program = TestedProgram()
              program.start("--crawl")
      
              program = TestedProgram()
              output = program.start("list-posts", "--site", blog_files[NO_LINKS_TEST])
      
              output.strip()
      
              # Expected links from the example output
              expected_output = ""
      
              # Check if all expected links are present in the output
              if expected_output != output:
                  return CheckResult.wrong(
                      f"The output of the program does not match the expected output for the list-posts sub-command."
                      f"\nYour program output: {output}"
                      f"\nExpected output: {expected_output}")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test5_crawling_with_nested_links_a(self):
              # Test the crawl flag and list-posts sub-command for blog with one blog-posts.
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog = blog_files[NESTED_LINKS_TEST_1][-1]
              program.start('--explore', blog)
              program = TestedProgram()
              program.start("--crawl")
      
              program = TestedProgram()
              output = program.start("list-posts", "--site", blog)
      
              output.strip()
      
              # Expected links from the example output
              expected_output = blog_files[NESTED_LINKS_TEST_1][0]
      
              # Check if all expected links are present in the output
              if expected_output not in output:
                  return CheckResult.wrong(
                      f"Test was carried out for blog site with just one blog post expected_output: {expected_output} program_output: {output}")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test6_crawling_with_nested_links_b(self):
              # Test the crawl flag and list-posts sub-command for blog with 2 nested blog-posts.
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog = blog_files[NESTED_LINKS_TEST_2][-1]
              program.start('--explore', blog)
              program = TestedProgram()
              program.start("--crawl")
      
              program = TestedProgram()
              output = program.start("list-posts", "--site", blog)
      
              output.strip()
      
              # Expected links from the example output
              expected_output = blog_files[NESTED_LINKS_TEST_2][:-1]
      
              # Check if all expected links are present in the output
              for link in expected_output:
                  if link not in output:
                      return CheckResult.wrong(f"Test was carried out for blog site with two blog posts {link} not found in "
                                               f"the program output")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test7_crawling_with_flat_multiple_pages(self):
              # Test the crawl flag and list-posts sub-command for blog with many blog-posts.
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog = blog_files[FLAT_MULTIPLE_LINKS_TEST][-1]
              program.start('--explore', blog)
              program = TestedProgram()
              program.start("--crawl")
      
              program = TestedProgram()
              output = program.start("list-posts", "--site", blog)
      
              output.strip()
      
              # Expected links from the example output
              expected_output = blog_files[FLAT_MULTIPLE_LINKS_TEST][:-1]
      
              # Check if all expected links are present in the output
              for link in expected_output:
                  if link not in output:
                      return CheckResult.wrong(
                          f"Test was carried out for blog site with multiple blog posts {link} not found in "
                          f"the program output")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test8_crawling_with_nested_and_flat_posts(self):
              # Test the crawl flag and list-posts sub-command for blog with many blog-posts (flat and nested).
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog = blog_files[NESTED_AND_FLAT_LINKS_TEST][-1]
              program.start('--explore', blog)
              program = TestedProgram()
              program.start("--crawl")
      
              program = TestedProgram()
              output = program.start("list-posts", "--site", blog)
      
              # Expected links from the example output
              expected_links = blog_files[NESTED_AND_FLAT_LINKS_TEST][:-1]
      
              # Check if all expected links are present in the output
              for link in expected_links:
                  if link not in output:
                      return CheckResult.wrong(
                          f"Test was carried out for blog site with multiple blog posts flat and nested. {link} not found in "
                          f"the program output")
      
              return CheckResult.correct()
      
          @dynamic_test(time_limit=120000)
          def test9_crawling_and_update_last_link(self):
              # Test the crawl flag and checking if the last_link column of the blogs table is updated.
              remove_db_file()
              program = TestedProgram()
              program.start("--migrate")
              program = TestedProgram()
              blog = blog_files[FLAT_MULTIPLE_LINKS_TEST][-1]
              program.start('--explore', blog)
              program = TestedProgram()
              program.start("--crawl")
      
              program = TestedProgram()
              output = program.start("--list")
      
              output.strip()
      
              # Check if all expected links are present in the output
              for link in blog_files[FLAT_MULTIPLE_LINKS_TEST][:-1]:
                  if f'{blog} {link}' in output:
                      return CheckResult.correct()
      
              return CheckResult.wrong(
                  f"Test was carried out for blog site with multiple blog posts seems like the last_link column in the blogs "
                  f"table is not updated after crawling")
      
      
      if __name__ == '__main__':
          TestBlogNotifierCLI().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |
      import multiprocessing
      
      from test.tests import TestBlogNotifierCLI
      from test.blognotifier_test_utils import *
      
      if __name__ == '__main__':
          http_server_process: multiprocessing.Process = None
          try:
              # creating fake blog(just html files) for testing
              create_blog_site_with_no_posts()
              create_blog_site_with_nested_posts(1, NESTED_LINKS_TEST_1)
              create_blog_site_with_nested_posts(2, NESTED_LINKS_TEST_2)
              create_flat_blog_site_with_multiple_posts()
              create_blog_site_with_nested_and_flat_posts()
      
              # starting python's http.server
              http_server_process = multiprocessing.Process(target=run_http_server, args=(8000,))
              http_server_process.start()
      
              # running tests
              TestBlogNotifierCLI('blog_notifier.blog_notifier').run_tests()
          finally:
              # stopping python's http.server
              # http_server_process.kill()
              if http_server_process:
                  http_server_process.terminate()
                  http_server_process.join()
              # removing all the html files created
              remove_fake_blog()
    learner_created: false
  - name: go.sum
    visible: true
    text: |
      github.com/PuerkitoBio/goquery v1.9.1 h1:mTL6XjbJTZdpfL+Gwl5U2h1l9yEkJjhmlTeV9VPW7UI=
      github.com/PuerkitoBio/goquery v1.9.1/go.mod h1:cW1n6TmIMDoORQU5IU/P1T3tGFunOeXEpGP2WHRwkbY=
      github.com/andybalholm/cascadia v1.3.2 h1:3Xi6Dw5lHF15JtdcmAHD3i1+T8plmv7BQ/nsViSLyss=
      github.com/andybalholm/cascadia v1.3.2/go.mod h1:7gtRlve5FxPPgIgX36uWBX58OdBsSS6lUvCFb+h7KvU=
      github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
      github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
      github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
      github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
      github.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=
      github.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=
      github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
      golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
      golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
      golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
      golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
      golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
      golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
      golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
      golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
      golang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=
      golang.org/x/net v0.21.0 h1:AQyQV4dYCvJ7vGmJyKki9+PBdyvhkSd8EIx/qb0AYv4=
      golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=
      golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
      golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
      golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
      golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
      golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
      golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
      golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
      golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
      golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
      golang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
      golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
      golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
      golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=
      golang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=
      golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
      golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
      golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
      golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
      golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
      golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
      golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
      golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
      golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=
      golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
      gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
      gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
      gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
      gorm.io/driver/sqlite v1.5.5 h1:7MDMtUZhV065SilG62E0MquljeArQZNfJnjd9i9gx3E=
      gorm.io/driver/sqlite v1.5.5/go.mod h1:6NgQ7sQWAIFsPrJJl1lSNSu2TABh0ZZ/zm5fosATavE=
      gorm.io/gorm v1.25.7 h1:VsD6acwRjz2zFxGO50gPO6AkNs7KKnvfzUjHQhZDz/A=
      gorm.io/gorm v1.25.7/go.mod h1:hbnx/Oo0ChWMn1BIhpy1oYozzpM15i4YPuHDmfYtwg8=
    learner_created: true
  - name: yaml_configs.go
    visible: true
    text: "package main\n\nimport (\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n\t\"log\"\n\t\
    \"os\"\n)\n\ntype EmailServer struct {\n\tHost string `yaml:\"host\"`\n\tPort\
    \ int    `yaml:\"port\"`\n}\n\ntype EmailClient struct {\n\tEmail    string `yaml:\"\
    email\"`\n\tPassword string `yaml:\"password\"`\n\tSendTo   string `yaml:\"send_to\"\
    `\n}\n\ntype TelegramClient struct {\n\tBotToken string `yaml:\"bot_token\"`\n\
    \tChanel   string `yaml:\"channel\"`\n}\n\ntype Config struct {\n\tMode     string\
    \         `yaml:\"mode\"`\n\tServer   EmailServer    `yaml:\"server\"`\n\tClient\
    \   EmailClient    `yaml:\"client\"`\n\tTelegram TelegramClient `yaml:\"telegram\"\
    `\n}\n\nfunc yamlToStruct(yamlData []byte) (Config, error) {\n\tvar config Config\n\
    \terr := yaml.Unmarshal(yamlData, &config)\n\tif err != nil {\n\t\tlog.Fatalf(\"\
    error: %v\", err)\n\t\treturn config, err\n\t}\n\treturn config, nil\n}\n\nfunc\
    \ getFile(fileName string) ([]byte, error) {\n\tdata, err := os.ReadFile(fileName)\n\
    \tif err != nil {\n\t\tfmt.Printf(\"file '%s' not found\\n\", fileName)\n\t\t\
    return []byte{}, err\n\t}\n\treturn data, nil\n}\n"
    learner_created: true
  - name: go.mod
    visible: true
    text: "module task\n\ngo 1.22.0\n\nrequire (\n\tgithub.com/PuerkitoBio/goquery v1.9.1\
    \ // indirect\n\tgithub.com/andybalholm/cascadia v1.3.2 // indirect\n\tgithub.com/jinzhu/inflection\
    \ v1.0.0 // indirect\n\tgithub.com/jinzhu/now v1.1.5 // indirect\n\tgithub.com/mattn/go-sqlite3\
    \ v1.14.22 // indirect\n\tgolang.org/x/net v0.21.0 // indirect\n\tgopkg.in/yaml.v3\
    \ v3.0.1 // indirect\n\tgorm.io/driver/sqlite v1.5.5 // indirect\n\tgorm.io/gorm\
    \ v1.25.7 // indirect\n)\n"
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/43940#comment
check_profile: hyperskill_go
status: Solved
feedback:
  message: <html>Correct solution</html>
  time: "Wed, 27 Mar 2024 03:53:57 UTC"
record: -1
